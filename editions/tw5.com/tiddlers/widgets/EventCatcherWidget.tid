created: 20201123113532200
modified: 20201202200719126
tags: Widgets
title: EventCatcherWidget
type: text/vnd.tiddlywiki

! Introduction

<<.from-version "5.1.23">>

//This is a technically advanced widget intended for use by those familiar with HTML, CSS and DOM event handling.//

The event catcher widget traps DOM-initiated Javascript events dispatched within its child content, and allows invoking a series of ActionWidgets in response to those events. 

In order for the events to be trapped they must:

* be of one of the events specified as a parameter to the event catcher widget's `events` attribute.
* arise within a DOM node specified by the widget's `selector` attribute.
* support [[event bubbling|https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture]].

Use of the event catcher widget is beneficial when using large numbers of other triggering widgets such as the ButtonWidget that may cause performance problems. The event catcher widget alleviates these problems by using an approach very similar to "event delegation" in JavaScript parlance. 

! Content and Attributes

The content of the `<$eventcatcher>` widget is displayed normally.

|!Attribute |!Description |
|events |Space separated list of JavaScript events to be trapped, for example "click" or "click dblclick" |
|selector |A CSS selector. Only events originating inside a DOM node with this selector will be trapped. |
|actions-* |Action strings to be invoked when a matching event is trapped. Each event is mapped to an action attribute name of the form <code>actions-<em>event</em></code> where <code><em>event</em></code> represents the type of the event. For example: `actions-click` or `actions-dblclick` |
|class |An optional CSS class name to be assigned to the HTML element |
|tag |Optional. The html element the widget creates to capture the events, defaults to:<br>» `span` when parsed in inline-mode<br>» `div` when parsed in block-mode |

! Variables

The following variables are made available to the actions:

|!Variables |!Description |
|`dom-*` |All DOM attributes of the node matching the given selector are made available as variables, with the prefix `dom-` |
|`modifier` |The [[modifier Variable]] contains the Modifier Key held during the event (can be "normal", "ctrl", "shift", "alt" or combinations thereof) |
|`event-mousebutton`|The mouse button (if any) used to trigger the event (can be "left", "right" or "middle"). Note that not all event types support the mousebutton property |
|`event-type`|The type property of the JavaScript event |
|`event-detail-*`|Any properties in the detail attribute of the event are made available with the prefix `event-detail-` |
|`tv-popup-coords`|A co-ordinate string that can be used with the ActionPopupWidget to trigger a popup at the DOM node matching the selector where the event originated |
|`tv-selectednode-posx`|`x` offset position of the selected DOM node |
|`tv-selectednode-posy`|`y` offset position of the selected DOM node  |
|`tv-selectednode-width`|`offsetWidth` of the selected DOM node |
|`tv-selectednode-height`|`offsetHeight` of the selected DOM node |
|`event-fromselected-posx`|`x` position of the event relative to the selected DOM node |
|`event-fromselected-posy`|`y` position of the event relative to the selected DOM node |
|`event-fromcatcher-posx`|`x` position of the event relative to the event catcher DOM node |
|`event-fromcatcher-posy`|`y` position of the event relative to the event catcher DOM node |

! Example

This example uses the ActionLogWidget and will log the `data-item-id` attribute of the clicked DOM node to the browser's JavaScript [[console|Web Developer Tools]]

```
\define clickactions()
<$action-log item=<<dom-data-item-id>> event=<<event-type>>/>
\end

\define contextmenu-actions()
<$action-log item=<<dom-data-item-id>> event=<<event-type>>/>
\end

<$eventcatcher events="click contextmenu" selector=".item" actions-click=<<clickactions>> actions-contextmenu=<<contextmenu-actions>> tag="div">

<div class="item" data-item-id="item1">
Click events here will be trapped
</div>

<div class="item" data-item-id="item2">
And here too
</div>

<div data-item-id="item3">
Not here
</div>

<div class="item" data-item-id="item4">
And here
</div>

</$eventcatcher>
```

